What do you rate yourself in angular
What has your experience been like as part of an Agile software development process, 
Can you describe the development methodology that you're familiar with?


Typescript
=============
Typescript vs ECMAScript
-------------------------
TypeScript syntax is a superset of JavaScript(Ecmascript).

TypeScript is just an extension of the standard ECMAScript 6 syntax

TypeScript is very similar Flow, dart and coffeescript that focus on the same problem.

TypeScript is a free and open-source programming language developed and maintained by Microsoft.

ES6 is a version of ECMAScript (ES), which is a scripting language specification standardized by ECMA international.

TypeScript supports all primitive data types ( String, Number, Boolean, Array, Enum, Tuple, generics) . 
Major advantage of TypeScript is that it helps to build class-based objects.

Both TypeScript and ES6 are supports Modules, Class, Blocked Scope, Template Literals, Generators, Optional Parameters , 
Default Parameters, Rest Parameters, De-structuring Assignment, Symbols, Closure, decorators and Latest Iterators.

TypeScript only support features are generics and type annotations, Interfaces, Enums, Readonly properties and Mixin

Typescript is an extension of ES6. Some features that are additionally included in Typescript are:

1. Type Annotations 
	eg: name: String = ‘xyz’
	number: Number = ‘123’;
2. Interfaces
3. Enums
4. Mixins

What does @Component decorator exactly do?
---------------------------------------------
Component decorator allows you to mark a class as an Angular component and provide additional metadata that determines how the component should be processed, 
instantiated and used at runtime.


Roles and Responsibilities:

Make design and technical decisions for AngularJS projects

Delivering a complete front end application
Coordinating the workflow between the graphic designer, the HTML coder, and yourself
Cooperating with the back-end developer in the process of building the RESTful API
Communicating with external web services

Creating self-contained, reusable, and testable modules and components
Ensuring a clear dependency chain, in regard to the app logic as well as the file system
Validating user actions on the client side and providing responsive feedback


Html 5 Question;
==================
1. what is HTML5 Doctype? why should mention?
2. HTML5 Feature?
3. Difference between svg and canvas?

1. diff b/w html4 and html5
2. why do we need to use header tag in HTML
3. what is the use of DOCTYPE in html 5
4. semantic elements in HTML
5. Drog and Drop syntax?
6. Html API?
7. Difference between SVG & Canvas?
Explain new Form input types in HTML5.
What is the importance of Drag and Drop in HTML5?
Explain the concept of web storage in HTML5
What are the advantages of using HTML5?
What is image map in Html5?
What is the application cache in HTML5 and why it is used?
What are custom attributes in Html5? Explain


CSS -3 Question;
====================
1. what are display properties? (none,inline, block, inline-block)
2. what is difference inline and inline-block?
3. CSS float Property? (none,left, right, initial, inherit)
4. CSS position Property? position: static|absolute|fixed|relative|sticky|initial|inherit;
5. CSS Box Model?
6. What is  Pseudo-classes and Pseudo-element?Ex!

1. css positions and diff
2. opacity
3. visiblity : hidden , display none diff


JS  Question;
=================
Var, let, const
Javascript Data types?
Difference between null and undefine?
what is Hoisting in javascript?
Event Bubbling?
How to handle exception in javascript?
Difference between Document.onload & Window.onload?
Difference between setTimeout & setInterval?
How to stop setInterval method?
what is the different Const and Object.freeze()?
Object.seal()?

1. Find duplicate number in array?
2. What is difference between == and ===?
3. closure function? and example?
4. promises?
5. Arrow function
6. Prototype?
7. Array methods?(Reduce,Some)
8. Difference between call() vs apply()?
9. currying function?
10. Recursive function?
11. callback function?
12. Spread operator?
13. Rest operator?
14. Async Await?
15. Mixin
16. Map vs Weakmap?
17. How to Merge two objects?
18. How to Cloning an object?


RxJS  Question;
=================
1. what is mergeMap in RxJS?
Question no: 45 :- Whats the full form of RxJs?
Question no: 46 :- What is the purpose of RxJs?
Question no: 47 :- What are observables and observers?
Question no: 48 :- Explain the use of Subscribe with sample code.
Question no: 49 :- How to unsubscribe in RxJs?
Question no: 50 :- Explain concept of operators with sample code.
Question no: 51 :- How to install RxJs?
Question no: 52 :- Differentiate between promise and RxJs?
Question no: 53 :- In Angular where have you used RxJs?
Question no: 54 :- Which operators have you used from RxJs?
Question no: 55 :- What is Push/reactive vs Pull/Imperative?



================================
Angular interview Questions
===========================
1. angular style encapsulation
2. why angular js developed as a SPA?
3. angular pipe example, how to develope custom pipe
4. what is typescript Enum, Rest Parameters?
5. what are the datatypes available in typescript
6. what difference between typescript and  ES6(ECMAScript 6, also known as ECMAScript 2015)
7. 

1. what is decorators in angular?
2. how compiler know the component file and module file?
3. what is two-way property binding?
4. where we store AUTH token
5. different type of browser cache?
6. Difference between nghide and ngif
7. how many files we create in angular?
8. which command we use to run project?
9. What is an AsyncPipe in Angular?

1. Lozyloading How to do step by step?
2. what are the class decorators?
3. what is DI and how to create?
4. difference between pipe and directives
5. what is directive?
6. Router & Router gourds?


1. Explain Zone in Angular?
2. Explain Ivy Renderer in Angular?
3. What is Bazel and Closure Compiler in Angular6?
4. Explain Service Worker in reference to Angular JS

Question no: 1 :- Whats the use of Angular ?
Question no: 2 :- What are directives in Angular ?
Question no: 3 :- Explain the different types of Angular directives ?
Question no: 4 :- Explain the importance of NPM and Node_Modules folder ?
Question no: 5 :- Explain the importance of Package.json file in Angular ?
Question no: 6 :- What is typescript and why do we need it ?
Question no: 7 :- Explain importance of Angular CLI ?
Question no: 8 :- Explain the importance of Component and Modules ?
Question no: 9 :- What is a decorator in Angular ?
Question no: 10 :- What are Annotation or MetaData ?
Question no: 11 :- What is a template ?
Question no: 12 :- Explain the four types of Data bindings in Angular ?
Question no: 13 :- Explain architecture of Angular ?
Question no: 14 :- What is SPA in Angular ?
Question no: 15 :- How to implement SPA in Angular ?
Question no: 16 :- How to implement routing in Angular ?
Question no: 17 :- Explain Lazy Loading ?
Question no: 18 :- How to implement Lazy Loading in Angular ?
Question no: 19 :- Define Services ?
Question no: 20 :- What is Depedency Injection ?
Question no: 21 :- How to implement Depedency Injection ?
Question no: 23 :- Whats the benefit of Depedency Injection ?
Question no: 24 :- Differentiate between ng serve and ng build ?
Question no: 25 :- Explain the --prod parameter in ng build ?
Questions No:- 26 :- Explain ViewChild and ViewChildren?
Questions No:- 27 :- Why do we need Template reference variables?
Questions No:- 28 :- What is ContentProjection?
Questions No:- 29 :- Explain Content projection Slot?
Questions No:- 30 :- What is ContentChild and ContentChildren?
Questions No:- 31 :- ViewChild vs ViewChildren vs ContentChild vs ContentChildren?
Questions No:- 32 :- Explain the importance of Component life cycle ?
Questions No:- 33 :- Explain events and sequence of component life cycle ?
Questions No:- 34 :- Constructor vs ngOnInit() ?
Questions No:- 35 :- How to make HTTP calls using Angular ?
Questions No:- 36 :- What is the need of Subscribe function ?
Questions No:- 37 :- How to handle errors when HTTP fails ?
Questions No:- 38 :- How to pass data between components ?
Questions No:- 39 :- Explain importance of input, output & event emitters ?
Questions No:- 40 :- How to pass during routing ?
Questions No:- 41 :- Is it a good practice to pass data using services ?
Question No: 42:- What is the need of Angular Pipes?
Question No: 43:- Can you name some built-in Angular Pipes?
Question No: 44:- How to create Custom pipes in Angular?



====================================================================
1. out of given 3 arrays with n number of elements, find out the common element(s) for all 3 arrays.
 
2. from a given array, make n elements rotate.
eg. given Array:[21,54,11,35,4,18], index:3; output Array: [4,18,21,54,11,35]
 
3. from an array, find out the elements, and their repetition and print as element=count.
eg. 
input Array: [2,1,3,4,6,5,4,7,5,6,8,2,3,6,2,6,4,4,7,3,4,5,6]
output: 
2=3
1=1
3=3
4=5
6=5
5=5
7=2
8=1

Q4. Given a sorted array with the duplicates, move all the distinct elements to the front. 
arr[] = [1, 2, 2, 3, 4, 4, 4, 4, 5, 6, 6] 

output: 
arr[] = [1, 2, 3, 4, 5, 6, ..........]

Q5. Given a sorted array and a key, find the two numbers which sum to the given key. 
arr = [1, 3, 4, 5, 7, 8] 
key = 10 

output: 3 7 

Q6. What will be the output?

a()
b()

function a() {
console.log(‘This is function a’);
}

var b = function() {
console.log(‘This is function b’);
}
   

7- Prime number program
9-Q14. Print the right diagonal of the matrix
Input:
1    2    3    4 
5    6    7    8
9   10    11  12
13  14    15  16

Output:
4  7  10  13


function rightDiagonal(a,row,column){
    for (let i=0;i<row;i++){
        for(let j=0;j<column; j++){
            if(i+j == column-1){
                console.log(a[i][j]);
            }
        }
    }
}



Q15. What will be the output?

console.log(‘Good Morning’);

setTimeout(function() {
    console.log(“Hello, World!”);
});

console.log(‘Good Afternoon’);

Ans
Good Morning
Good Afternoon
Hello, World!


Q16. What will be the output?

a()
b()

function a() {
    console.log(‘This is function a’);
}

var b = function() {
    console.log(‘This is function b’);
}

Ans
This is function a
This is function b
1> Write a function that returns date in format (HH:mm: ss) from the number of seconds from midnight.


 302 should return 00:05:02

2> Given an array of integers return all pairs of the number whose sum is equal to given number k.

    Input : [4,5,6,3], k = 7

   Output = (4,3), (3,4)

3> Write code to print  pattern


    *   
   * *
  * * *
 * * * *
* * * * *

the function should accept the number of lines as input and print the above pattern

4> Create a Hapi Server and write an endpoint that returns current server time.


5> What is Promise in Javascript? How to execute promise in parallel.

6> Difference between async-await and promise



1.	AoT compilation / TreeShake
https://medium.com/spektrakel-blog/angular2-going-production-ready-with-ahead-of-time-compilation-aot-developer-experiences-aebaa0228909
2.	ChangeDetectionStrategy.OnPush
https://alligator.io/angular/change-detection-strategy/
3.	TrackBy in ngFor
https://netbasal.com/angular-2-improve-performance-with-trackby-cc147b5104e5
4.	Loading module on-demand using loadChildren – Refer canLoad technique
https://angular.io/guide/router#canload-guard-guarding-unauthorized-loading-of-feature-modules
5.	WebWorkers for large operations and PWA – Progressive web apps 


1. Find Max number in given array 
===================================
var arr = [3, 4, 12, 1, 0, 5];
let max = Math.max(...arr);

without build-in methods
------------------------
var arr = [3, 4, 12, 1, 0, 5];
var max = arr[0];
for (var k = 1; k < arr.length; k++) {
  if (arr[k] > max) {
    max = arr[k];
  }
}
console.log("Max is: " + max);

const array = [37,-5,-15,-37,5,15]
const forLoopMinMax = () => {
  let min = array[0], max = array[0]
  for (let i = 1; i < array.length; i++) {
    let value = array[i]
    min = (value < min) ? value : min
    max = (value > max) ? value : max
  }
  return [min, max]
}
console.log(forLoopMinMax());

Another way
---------------

var arr = [50,20,30,40, 10];
arr.max = function() { return  Math.max.apply(Math, this); }; 
arr.min = function() { return  Math.min.apply(Math, this); };

alert("min: " + arr.min() + " max: " + arr.max());

const number = [80, 12, 67, 58, 30];
number.sort((x, y) => x -  y);
let min_val = number[0];
let max_val = number[number.length -1]

2. Find given array is sorted or not?
=====================================
without any build-in function
-----------------------------
function isSorted(array) {
    for (let i = 0; i < array.length; i++) {
      const current = array[i], next = array[i + 1];
      if (current > next) {
           return false; 
        }
    }
    return true;
  }
const number = [80, 81, 67, 58, 30];
console.log(isSorted(number));
